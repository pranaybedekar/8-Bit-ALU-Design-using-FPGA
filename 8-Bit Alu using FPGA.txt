//VERILOG PROGRAMME OF 8-BIT ALU

module design (A,B,op,alu_out);
  input [7:0] A,B;
  input [3:0] op;
  output [7:0] alu_out;
  reg [7:0] alu_out;
  always @(*)
    begin
      case (op)
        4'b0000: alu_out=A+B;
        4'b0001: alu_out=A-B;
        4'b0010: alu_out=A*B;
        4'b0011: alu_out=A/B;
        4'b0100: alu_out=A%B;
        4'b0101: alu_out=A&B;
        4'b0110: alu_out=A|B;
        4'b0111: alu_out=A&&B;
        4'b1000: alu_out=A||B;
        4'b1001: alu_out=A^B;
        4'b1010: alu_out=A>>B;
        4'b1011: alu_out=A<<B;
        4'b1100: alu_out=A>B;
        4'b1101: alu_out=A<B;
        4'b1110: alu_out=A+1;
        4'b1111: alu_out=A-1;
        default: alu_out=0;
      endcase
    end
endmodule

// TESTBENCH PROGRAMME OF 8-BIT ALU

module testbench();
  reg [7:0] A,B;
  reg [3:0] op;
  wire [7:0] alu_out;
 
  design testbench (A,B,op,alu_out);
  initial
    begin
      op=4'b0000; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b0001; A=7'b00001111; B=7'b00001010;
      #10;
      op=4'b0010; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b0011; A=7'b00001111; B=7'b00000011;
      #10;
      op=4'b0100; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b0101; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b0110; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b0111; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1000; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1001; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1010; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1011; A=7'b00001111; B=7'b00001101;
      #10;
      op=4'b1100; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1101; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1110; A=7'b00000001; B=7'b00001101;
      #10;
      op=4'b1111; A=7'b00000001; B=7'b00001101;
      #10;
    end
    endmodule 
